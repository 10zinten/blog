{
  
    
        "post0": {
            "title": "Summary of SOLID Principles",
            "content": "Here is the original blog . What is SOLID Design . SOILD design comes from paper “Design Principles and Design Patterns” by Robert C. Martin | This mnemonic SOLID is attributed to Michael Feathers | The principles are: Single Resposibility Principle SRP | Open Closed Principle | Liskov’s Substitutabilty Principle | Interface Segregation Principle | Dependency Inversion Principle | . | SOLID design principles are meant to be used holistically to get the real value out of it. | . Single Responsibility Principle (SRP) . Definition: Every module/class should only have one responsibility and therefore only one reason to change. | Relevant Zen: There should be one– and preferably only one –obvious way to do things. | Notes: It increases cohesion and loose coupling by organizing code around responsibilities. | Think of reponsibilities as use cases. | Each use case should only be handled in one place therefore creating one obvious way to do things (following the Zen) hence “one reason to change” only if use case has changed (following SRP). | The code is sparse, and not dense, simple not complex, flat and not nested with SRP | . | .",
            "url": "https://10zinten.github.io/blog/software-engineering/python/2020/06/18/solid-principles-summary.html",
            "relUrl": "/software-engineering/python/2020/06/18/solid-principles-summary.html",
            "date": " • Jun 18, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "A Summary of “Molecule of More”",
            "content": "Check out the original book . Summary of “Molecule of More” . བརྩེ་བ། . “Dopamine” ཀྱི་བྱེད་སྒོ་ནི་སྤྲོ་སྐྱིད་ཀྱི་ཚོར་བ་ལ་བརྟེན་ནས་བྱུང་བ་ཞིག་མ་ཡིན་པར་གློ་བུར་དུ་བྱུང་བའི་ལས་དང་འབྱུང་སྲིད་པའི་ལས་ལ་སྔོན་དཔག་གམ་རེ་འདུན་བྱེད་པ་ལ་བརྟེན་ནས་བྱུང་བ་ཞིག་ཡིན། | . keywords: . སྔོན་དཔག, རེ་འདུན།, གློ་བུར་དུ། .",
            "url": "https://10zinten.github.io/blog/notes/summary/2020/05/16/molecule-of-more-notes.html",
            "relUrl": "/notes/summary/2020/05/16/molecule-of-more-notes.html",
            "date": " • May 16, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Introduction to Unicode in Python",
            "content": "What is Unicode . To understand what Unicode is, first we need to understand basic encoding scheme called ASCII. Essentially ASSCII encodes every character in 7-bits, that means it can represent only 128 possible set of characters. Unicode is just a massive version of the ASCII table, which can represent 1,114,112 possible characters. In fact first 128 characters of Unicode table correspong precisely to the ASCII characters. That makes Unicode backward compatible to ASCII. For more detail description of Unicode follow this link. . But remember that Unicode is not an encoding scheme, it&#39;s just a collection of code points representing characters and symbols. Unicode has various encoding sheme like UTF-8 (most commonly used), UTF-16 and UTF-32 are used for representing Unicode characterss as binary data. . Every character in the Unicode table is mapped to something called unicode code point which is represented in hexadecimal (e.g. code point for ཀ is u0f40). Here is the unicode code point in python. . &#39;ཀ&#39;.encode(&#39;unicode_escape&#39;) # get unicode code point . b&#39; u0f40&#39; . int(0x0f40) # 0x denotes hexadecimal . 3904 . ord(&#39;ཀ&#39;) # check for integer value. . 3904 . Every language is given a specific unicode code point range. For eg: . 0020-007f (32-127) for basic latin, similary to ASCII code point. | 0f00-0fff (3840-4095) for Tibetan | . int(0x0020), int(0x007f), int(0x0f00), int(0x0fff) . (32, 127, 3840, 4095) . UTF-8 - Great Hack of Unicode . We obviously know that for code point of a character larger than numeral 255 can&#39;t be represented with one byte (or 8-bits). It will need more than 1 bytes. So here comes UFT-16 which represent every character in two bytes and if code point is larger than that we need have UTF-32 wich represent every character in 4 bytes. . But there some big issues with UTF-16 and UTF-32: . Waste lots of memory, lots of bytes with all 0s. | Produces a 0x00 (i.e 00000000), which in many old computer interpreted as end of the string of characters. | Not compatible with ASCII. | Required BOM | . Luckily UTF-8 solves all these problems with it&#39;s wonderful hack. The hack is how it can represent all other non ASCII characters. . UTF-8 Character Representation . UTF-8 was designed for backwrad compatibility with ASCII. So, the first 128 characters are ASCII characters with exact same order. Since unicode character code point order below the 255 requires extra bytes which makes UTF-8 a variable-length encoding scheme and it can encode code points in one to four bytes. . But the questions remain, how it represent unicode character which requires more than one byte while still avoiding eight consecutive 0s ? How it can specify the start of a characters ?. Well, let me explain it&#39;s unicode character representation along with an example. . Consider we are encoding first letter of Tibetan alphabet, ཀ: . The Unicode code point for ཀ is U+0F40 | Hexadecimal 0F40 is binary 00001111 01000000 | In UTF-8 encoding, first four bits tells how many bytes required to represent the given code point. According UTF-8 scheme table, ཀ will need three bytes. So, the those four bits will have three 1s (like 1110...). | Then four most significant bits of the code point are stored in the remaining low order four bits of the first byte (like 11100000). | All continuation bytes contains six bits from the code point because 10 is stored in the high order two bits to mark it as a continuation byte. It also avoids eight consecutive 0s. So, the remainingg bits of code point is placed like this 10111101 10000000. | So ཀ in UTF-8 binary is 11100000 10111101 10000000. For more about UTF-8 follow this link . Calulating Numeral value of a Unicode code point in python . &#39;ཀ&#39;.encode(&#39;utf-8&#39;) # in hexadecimal . b&#39; xe0 xbd x80&#39; . &quot; &quot;.join(f&quot;{i:08b}&quot; for i in (0xe0, 0xbd, 0x80)) # convert hex to binary . &#39;11100000 10111101 10000000&#39; . As you can see here, we got the exact same binary value of ཀ as above. . Extract code point bits from UTF-8 bits: . Steps: . Seperate out code point bits, 11100000 10111101 10000000 | We got the code point bits of ཀ, 00001111 01000000 | convert extracted code point bits to int . int(&#39;0000111101000000&#39;, 2) . 3904 . Compare it with output of python&#39;s ord function . int(&#39;0000111101000000&#39;, 2) == ord(&#39;ཀ&#39;) . True . Fun facts . 95% of web pages in the internet uses UTF-8 encoding at time of wiriting this blog. | .",
            "url": "https://10zinten.github.io/blog/unicode/utf-8/python/nlp/2020/05/01/intro-unicode-in-python.html",
            "relUrl": "/unicode/utf-8/python/nlp/2020/05/01/intro-unicode-in-python.html",
            "date": " • May 1, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://10zinten.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://10zinten.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://10zinten.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://10zinten.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}